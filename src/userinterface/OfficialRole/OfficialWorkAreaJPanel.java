/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.OfficialRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.ChildSafetyDepartmentOrganization;
import Business.Organization.DoctorOrganization;
import Business.Organization.LegalDepartmentOrganization;
import Business.Organization.ManagementOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.InvestigationWorkRequest;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.DoctorRole.MedicalReportJPanel;
import userinterface.DoctorRole.RequestLabTestJPanel;

/**
 *
 * 
 */
public class OfficialWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private ChildSafetyDepartmentOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem system;
    private Network NET;
    

    public OfficialWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, ChildSafetyDepartmentOrganization organization, Enterprise enterprise, EcoSystem system) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        //valueLabel1.setText(enterprise.getName());
        lblUserName.setText(userAccount.getUsername());
        this.system = system;
        populateRequestTable();
    }
    
    public void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel) tblworkRequest.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[5];
            row[0] = request;
            row[1] = request.getReceiver();
            row[2] = request.getStatus();
            //String result = ((LabTestWorkRequest) request).getTestResult();
            if(request.getStatus()==null){
                row[3] = "Pending";
            }
            else{
            row[3] = request.getStatus().equals("Closed") ? "Available" : "Pending";
            row[4] = request.getAdd()==Boolean.TRUE?"Present":"Not Found";
            model.addRow(row);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnChildReport = new javax.swing.JButton();
        spRequestTable = new javax.swing.JScrollPane();
        tblworkRequest = new javax.swing.JTable();
        btnReportSummary = new javax.swing.JButton();
        btnMedicalExamiation = new javax.swing.JButton();
        lblWelcome = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        btnAccessMedicalExam = new javax.swing.JButton();
        lblAccess = new javax.swing.JLabel();
        lblAdd = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        lblImg = new javax.swing.JLabel();

        setBackground(new java.awt.Color(177, 201, 226));
        setLayout(null);

        btnChildReport.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnChildReport.setText("Report Child");
        btnChildReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChildReportActionPerformed(evt);
            }
        });
        add(btnChildReport);
        btnChildReport.setBounds(290, 370, 250, 39);

        tblworkRequest.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        tblworkRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Child Name", "Investigator Assigned ", "Investigation Status", "Investigation Report", "Adoption Catalog"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spRequestTable.setViewportView(tblworkRequest);
        if (tblworkRequest.getColumnModel().getColumnCount() > 0) {
            tblworkRequest.getColumnModel().getColumn(0).setResizable(false);
            tblworkRequest.getColumnModel().getColumn(1).setResizable(false);
            tblworkRequest.getColumnModel().getColumn(2).setResizable(false);
            tblworkRequest.getColumnModel().getColumn(3).setResizable(false);
            tblworkRequest.getColumnModel().getColumn(4).setResizable(false);
        }

        add(spRequestTable);
        spRequestTable.setBounds(286, 135, 920, 207);

        btnReportSummary.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnReportSummary.setText(" Investigation Report Summary");
        btnReportSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportSummaryActionPerformed(evt);
            }
        });
        add(btnReportSummary);
        btnReportSummary.setBounds(570, 370, 300, 37);

        btnMedicalExamiation.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnMedicalExamiation.setText("Request Medical Examination");
        btnMedicalExamiation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMedicalExamiationActionPerformed(evt);
            }
        });
        add(btnMedicalExamiation);
        btnMedicalExamiation.setBounds(910, 370, 300, 41);

        lblWelcome.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblWelcome.setText("Welcome");
        add(lblWelcome);
        lblWelcome.setBounds(37, 57, 94, 29);

        lblUserName.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblUserName.setText("username");
        add(lblUserName);
        lblUserName.setBounds(134, 57, 99, 29);

        btnAccessMedicalExam.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnAccessMedicalExam.setText("ACCESS");
        btnAccessMedicalExam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAccessMedicalExamActionPerformed(evt);
            }
        });
        add(btnAccessMedicalExam);
        btnAccessMedicalExam.setBounds(890, 530, 120, 40);

        lblAccess.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblAccess.setText(" To Access Medical Examination Reports");
        add(lblAccess);
        lblAccess.setBounds(550, 530, 370, 40);

        lblAdd.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblAdd.setText(" To Add Selected Child to Child Adoption Catalogue");
        add(lblAdd);
        lblAdd.setBounds(460, 460, 440, 40);

        btnAdd.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        add(btnAdd);
        btnAdd.setBounds(890, 460, 120, 40);

        lblImg.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/report-1.jpg"))); // NOI18N
        add(lblImg);
        lblImg.setBounds(-1820, -120, 3500, 910);
    }// </editor-fold>//GEN-END:initComponents

    private void btnChildReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChildReportActionPerformed
       // TODO add your handling code here:
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("RequestInvestigationJPanel", new RequestInvestigationJPanel(userProcessContainer, userAccount, enterprise));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnChildReportActionPerformed

    private void btnReportSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportSummaryActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblworkRequest.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        LabTestWorkRequest request = (LabTestWorkRequest)tblworkRequest.getValueAt(selectedRow, 0);
        if(request.getStatus().equals("Closed"))
        {
        ReportSummary processWorkRequestJPanel = new ReportSummary(userProcessContainer, request);
        userProcessContainer.add("ReportSummary", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        }
        else{
            JOptionPane.showMessageDialog(null, "Report Summary not Available");
        }
    }//GEN-LAST:event_btnReportSummaryActionPerformed

    private void btnMedicalExamiationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMedicalExamiationActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblworkRequest.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        LabTestWorkRequest request = (LabTestWorkRequest)tblworkRequest.getValueAt(selectedRow, 0);
        RequestMedicalExaminationJPanel processWorkRequestJPanel = new RequestMedicalExaminationJPanel(userProcessContainer, userAccount, enterprise, request, system);
        userProcessContainer.add("RequestMedicalExaminationJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_btnMedicalExamiationActionPerformed

    private void btnAccessMedicalExamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAccessMedicalExamActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("MedicalReportsJPanel", new MedicalReportsJPanel(userProcessContainer, userAccount, enterprise));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnAccessMedicalExamActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblworkRequest.getSelectedRow();
        if (selectedRow < 0){
            return;
        }
        
        LabTestWorkRequest request = (LabTestWorkRequest)tblworkRequest.getValueAt(selectedRow, 0);
        if(request.getAdd()==Boolean.TRUE){
            JOptionPane.showMessageDialog(null, "Child Entry already exists in the Catalogue");
        }
        else{
        if(request.getStatus().equals("Report  Filed") || request.getStatus().equals("Open")){
            JOptionPane.showMessageDialog(null, "Investigation still Open. Need to receive Clearence from the Police Department before Adding");
        }
        else if(request.getMedicalReport()==null || request.getMedicalReport().isEmpty()){
            JOptionPane.showMessageDialog(null, "Failed to add entry. Child has not received Medical Clearence");
        }
        else if(request.getStatus().equals("Closed")){
            request.setAdd(Boolean.TRUE);
        Organization org = null;
        
        for(Network network: system.getNetworkList()){
            for(Enterprise ent:network.getEnterpriseDirectory().getEnterpriseList()){
                if(ent==enterprise){
                    NET=network;
                }
            }
        }
            for(Enterprise ent:NET.getEnterpriseDirectory().getEnterpriseList()){
                for (Organization organization : ent.getOrganizationDirectory().getOrganizationList()){
                   if (organization instanceof ManagementOrganization){
                    org = organization;
                    break;
            }
        }
            }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(request);
            system.getWorkQueue().getWorkRequestList().add(request);
        }
            JOptionPane.showMessageDialog(null, "Child entry created in the Catalogue");
            populateRequestTable();
        }
        }
    }//GEN-LAST:event_btnAddActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccessMedicalExam;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChildReport;
    private javax.swing.JButton btnMedicalExamiation;
    private javax.swing.JButton btnReportSummary;
    private javax.swing.JLabel lblAccess;
    private javax.swing.JLabel lblAdd;
    private javax.swing.JLabel lblImg;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JLabel lblWelcome;
    private javax.swing.JScrollPane spRequestTable;
    private javax.swing.JTable tblworkRequest;
    // End of variables declaration//GEN-END:variables
}
